{"version":3,"sources":["mouse.js","utils.js","skeleten.js","App.js","index.js"],"names":["Mouse","selector","document","this","vector","THREE","_x","_y","_selector","_time","_delta","_fps","_init","Date","getTime","onmousemove","e","_requestAnimationFrame","_update","clientX","clientY","callback","x","y","window","innerWidth","innerHeight","PrintInAnimation","fps","value","console","log","Circle","radius","segments","color","geometry","material","Skeleton","landmarks","_landmarks","_tempLandmarks","model","_bodyParts","_skeletonGenerated","_axis","add","_convertToLocalSpace","_generateSkeleten","splice","length","forEach","pose","i","v","z","push","_generateHead","_generateSquareBody","_generateLeftArm","_generateRightArm","_generateLeftLeg","_generateRightLeg","_generateRightFoot","_generateLeftFoot","_generateRightHand","_generateLeftHand","_worldToLoacal","setFromPoints","mesh","name","head","position","copy","tempLandmarks","children","bodyPart","WIDTH","HEIGHT","LANDMARKS","Render3D","props","scene","camera","renderer","mouse","canvas","controls","circles","Array","fill","map","skeleton","animate","bind","setSize","background","mount","appendChild","domElement","OrbitControls","GLTFLoader","load","gltf","parser","associations","key","undefined","error","poseLandmarks","translateX","translateZ","light","axesHelper","gridHelper","update","render","requestAnimationFrame","ref","React","Component","App","video","ctx","onResults","renderLandmarks","a","querySelector","getContext","Pose","locateFile","file","setOptions","upperBodyOnly","smoothLandmarks","minDetectionConfidence","minTrackingConfidence","Camera","onFrame","send","image","width","height","start","results","save","clearRect","drawImage","drawConnectors","POSE_CONNECTIONS","lineWidth","drawLandmarks","restore","id","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b64944f2.chunk.js","sourcesContent":["import * as THREE from 'three'\n\nexport default class Mouse {\n    constructor(selector = document) {\n        this.vector = new THREE.Vector2()\n        this._x = 0\n        this._y = 0\n        this._selector = selector\n\n        this._time = 0\n        this._delta = 0\n        this._fps = 60\n        this._init()\n    }\n\n    _init() {\n        this._time = new Date().getTime()\n        this._selector.onmousemove = (e) => {\n            this._requestAnimationFrame(() => {\n                this._update(e.clientX, e.clientY)\n                //this._update(e.pageX, e.pageY)\n            })\n        }\n    }\n\n    _requestAnimationFrame(callback)\n    {\n        this._delta = new Date().getTime() - this._time\n        if (this._delta > 1000 / this._fps)\n            callback()\n    }\n\n    _update(x, y)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.vector.x = x / window.innerWidth * 2 - 1;\n        this.vector.y = -( y / window.innerHeight ) * 2 + 1;\n\n        this._delta = 0\n        this._time = new Date().getTime()\n        //console.log('mouse moved')\n    }\n\n}\n","import * as THREE from 'three'\n\nexport class PrintInAnimation {\n    constructor(fps=60) {\n        this._time = new Date().getTime()\n        this._delta = 0\n        this._fps = fps\n    }\n\n    try(value) {\n        this._delta = new Date().getTime() - this._time\n        if (this._delta > 1000 / this._fps){\n            if (typeof value === 'function')\n                value()\n            else\n                console.log(value)\n            this._delta = 0\n            this._time = new Date().getTime()\n        }\n    }\n}\n\n\nexport function Circle(radius = 0.01, segments = 10, color = 0xffff00)\n{\n    const geometry = new THREE.CircleGeometry(radius, segments);\n    const material = new THREE.MeshBasicMaterial({ color: color });\n    return new THREE.Mesh(geometry, material);\n}\n","import * as THREE from 'three'\nimport { Circle } from './utils'\n\nexport default class Skeleton\n{\n    constructor(landmarks = null, color = 0x0000ff)\n    {\n        this._landmarks = []\n        this._tempLandmarks = landmarks || []\n        this.model = new THREE.Group()\n        this.color = color\n        this._bodyParts = []\n        this._skeletonGenerated = false\n\n        this._init()\n    }\n\n    _init()\n    {\n        this._axis = new THREE.AxesHelper(1)\n        this.model.add(this._axis)\n\n        this._convertToLocalSpace()\n        this._generateSkeleten()\n    }\n\n    // convert model coordinates to the local space\n    _convertToLocalSpace()\n    {\n        if (!this._tempLandmarks)\n            return null\n\n        // clear the Array (and hopefully not to create a new one)\n        this._landmarks.splice(0, this._landmarks.length)\n        //this._landmarks = []\n\n        this._tempLandmarks.forEach((pose, i) => {\n            let v = new THREE.Vector3(pose.x, pose.y, pose.z)\n\n            // convert to the sceen space\n            /*\n            v.x = v.x * 2 - 1\n            v.y = -v.y * 2 + 1\n            v.z = 0\n            */\n\n            // making the Head as a center of axes model\n            v.x = v.x - this._tempLandmarks[0].x\n            v.y = -(v.y - this._tempLandmarks[0].y)\n            v.z = -(v.z - this._tempLandmarks[0].z)\n\n            this._landmarks.push(v)\n        })\n    }\n\n    _generateSkeleten()\n    {\n        if (this._landmarks.length)\n        {\n            this.model.add(this._generateHead())\n            this.model.add(this._generateSquareBody())\n            this.model.add(this._generateLeftArm())\n            this.model.add(this._generateRightArm())\n            this.model.add(this._generateLeftLeg())\n            this.model.add(this._generateRightLeg())\n            this.model.add(this._generateRightFoot())\n            this.model.add(this._generateLeftFoot())\n            this.model.add(this._generateRightHand())\n            this.model.add(this._generateLeftHand())\n\n            this._worldToLoacal()\n            this._skeletonGenerated = true\n        }\n    }\n\n    _worldToLoacal()\n    {\n        return null\n        this._landmarks = this._landmarks.map(v => {\n            // convert to 3D world\n\n            return this.model.worldToLocal(v.unproject(this._camera))\n        })\n    }\n    _generateLeftArm()\n    {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[11],\n            this._landmarks[13],\n            this._landmarks[15]\n        ])\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'LeftArm'\n        return mesh\n    }\n\n    _generateRightArm() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[12],\n            this._landmarks[14],\n            this._landmarks[16]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'RightArm'\n        return mesh\n    }\n\n    _generateSquareBody()\n    {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[12],\n            this._landmarks[11],\n            this._landmarks[23],\n            this._landmarks[24],\n            this._landmarks[12]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'SquareBody'\n        return mesh\n    }\n\n    _generateLeftLeg() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[23],\n            this._landmarks[25],\n            this._landmarks[27]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'LeftLeg'\n        return mesh\n    }\n\n    _generateRightLeg() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[24],\n            this._landmarks[26],\n            this._landmarks[28]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'RightLeg'\n        return mesh\n    }\n\n    _generateHead()\n    {\n        let head = new Circle(0.1, 20, this.color)\n        head.position.copy(this._landmarks[0])\n        head.name = 'Head'\n        return head\n    }\n\n    _generateRightFoot() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[28],\n            this._landmarks[30],\n            this._landmarks[32],\n            this._landmarks[28]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'RightFoot'\n        return mesh\n    }\n\n    _generateLeftFoot() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[27],\n            this._landmarks[31],\n            this._landmarks[29],\n            this._landmarks[27]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'LeftFoot'\n        return mesh\n    }\n\n    _generateRightHand() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[16],\n            this._landmarks[22],\n            this._landmarks[20],\n            this._landmarks[18],\n            this._landmarks[16]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'RightHand'\n        return mesh\n    }\n\n    _generateLeftHand() {\n        let material = new THREE.LineBasicMaterial({ color: this.color })\n        let geometry = new THREE.BufferGeometry().setFromPoints([\n            this._landmarks[15],\n            this._landmarks[21],\n            this._landmarks[19],\n            this._landmarks[17],\n            this._landmarks[15]\n        ])\n\n        let mesh = new THREE.Line(geometry, material)\n        mesh.name = 'LeftHand'\n        return mesh\n    }\n\n    getModel()\n    {\n        return this.model\n    }\n\n    update(tempLandmarks)\n    {\n        if (!this._skeletonGenerated)\n            this._generateSkeleten()\n\n        // convert coordinates to local space\n        this._tempLandmarks = tempLandmarks\n        this._convertToLocalSpace()\n\n        // Updating body parts models\n        this.model.children.forEach(bodyPart => {\n\n            if (bodyPart.name === 'Head')\n            {\n                bodyPart.position.copy(this._landmarks[0])\n            }\n            else if (bodyPart.name === 'LeftArm')\n            {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[11],\n                    this._landmarks[13],\n                    this._landmarks[15]\n                ])\n            }\n            else if (bodyPart.name === 'RightArm')\n            {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[12],\n                    this._landmarks[14],\n                    this._landmarks[16]\n                ])\n            }\n            else if (bodyPart.name === 'SquareBody') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[12],\n                    this._landmarks[11],\n                    this._landmarks[23],\n                    this._landmarks[24],\n                    this._landmarks[12]\n                ])\n            }\n            else if (bodyPart.name === 'LeftLeg') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[23],\n                    this._landmarks[25],\n                    this._landmarks[27]\n                ])\n            }\n            else if (bodyPart.name === 'RightLeg') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[24],\n                    this._landmarks[26],\n                    this._landmarks[28]\n                ])\n            }\n            else if (bodyPart.name === 'RightFoot') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[28],\n                    this._landmarks[30],\n                    this._landmarks[32],\n                    this._landmarks[28]\n                ])\n            }\n            else if (bodyPart.name === 'LeftFoot') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[27],\n                    this._landmarks[31],\n                    this._landmarks[29],\n                    this._landmarks[27]\n                ])\n            }\n            else if (bodyPart.name === 'RightHand') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[16],\n                    this._landmarks[22],\n                    this._landmarks[20],\n                    this._landmarks[18],\n                    this._landmarks[16]\n                ])\n            }\n            else if (bodyPart.name === 'LeftHand') {\n                bodyPart.geometry.setFromPoints([\n                    this._landmarks[15],\n                    this._landmarks[21],\n                    this._landmarks[19],\n                    this._landmarks[17],\n                    this._landmarks[15]\n                ])\n            }\n        })\n        // convert coordinates to local space\n        this._worldToLoacal()\n    }\n}\n","import React from 'react'\nimport './App.css'\nimport {\n    Pose,\n    POSE_LANDMARKS_NEUTRAL,\n    POSE_LANDMARKS_RIGHT,\n    POSE_LANDMARKS_LEFT,\n    POSE_CONNECTIONS\n} from '@mediapipe/pose/pose'\nimport { Camera } from '@mediapipe/camera_utils/camera_utils'\nimport { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils/drawing_utils'\n\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport Mouse from './mouse'\nimport { Circle, PrintInAnimation } from './utils'\nimport Skeleton from './skeleten'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\n\n\nconst WIDTH = 640   // in px\nconst HEIGHT = 480  // in px\nconst MOUSE = new Mouse()\nconst Print = new PrintInAnimation(1)\n\nlet LANDMARKS = []\n/*\nfunction getSceneToWorld(dx, dy)\n{\n    let projector = new THREE.Projector();\n    let mouse3D = new THREE.Vector3(dx / window.innerWidth * 2 - 1, -dy / window.innerHeight * 2 + 1, 0.5);\n    projector.unprojectVector(mouse3D, camera);\n    mouse3D.sub(camera.position);\n    mouse3D.normalize();\n\n    let rayCaster = new THREE.Raycaster(camera.position, mouse3D);\n    let scale = window.innerWidth * 2;\n    let rayDir = new THREE.Vector3(rayCaster.ray.direction.x * scale, rayCaster.ray.direction.y * scale, rayCaster.ray.direction.z * scale);\n    let rayVector = new THREE.Vector3(camera.position.x + rayDir.x, camera.position.y + rayDir.y, camera.position.z + rayDir.z);\n    return rayVector;\n}\n*/\n\nfunction clamp(x, a, b)\n{\n    return Math.min(Math.max(x, a), b);\n}\n\nfunction zColor(data)\n{\n    const z = clamp(data.from.z + 0.5, 0, 1)\n    return `rgba(0, ${255 * z}, ${255 * (1 - z)}, 1)`\n}\n\n\n\nclass Render3D extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.scene = null\n        this.camera = null\n        this.renderer = null\n        this.model = null\n        this.mouse = null\n        this.canvas = null\n        this.controls = null\n\n        this.circles = new Array(33).fill(0).map(() => new Circle())\n        this.skeleton = null\n\n\n        this.animate = this.animate.bind(this)\n    }\n\n    componentDidMount()\n    {\n        this.scene = new THREE.Scene()\n        this.camera = new THREE.PerspectiveCamera(75, WIDTH / HEIGHT, 0.1, 1000)\n        this.renderer = new THREE.WebGLRenderer()\n        this.renderer.setSize(WIDTH, HEIGHT)\n\n        this.scene.background = new THREE.Color(0xcccccc)\n\n        // appending Three DOM element.\n        this.mount.appendChild(this.renderer.domElement)\n        this.canvas = this.mount.children[0]\n\n        // adding controls\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement)\n\n        // get mouse sceen positions (-1, +1)\n        /*this.mouse = new THREE.Vector3(\n            this.canvas.offsetWidth / (MOUSE._x - this.canvas.offsetLeft) * 2 - 1,\n            this.canvas.offsetHeight / (MOUSE._y - this.canvas.offsetTop) * -2 + 1,\n            -1\n        ).unproject(this.camera)*/\n\n\n        // loading modules\n        let loader = new GLTFLoader()\n        loader.load('assets/3d/fire_fighter/scene.gltf', gltf => {\n            this.model = gltf\n            //this.scene.add(gltf.scene)\n            console.log(gltf)\n            // Shoulderl_010 & Arml_011\n            for (let [key, value] of gltf.parser.associations)\n            {\n                console.log(key)\n            }\n\n            this.animate()\n        }, undefined, error => {\n            console.error(error)\n        })\n\n\n        /*\n        let geometry = new THREE.BoxGeometry(1, 1, 1);\n        let material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        let cube = new THREE.Mesh(geometry, material);\n        this.scene.add(cube)\n\n        // adding the all circles to the scene\n         this.circles.forEach(circle => {\n             this.scene.add(circle)\n         })\n        */\n\n        // create a 3D object (it should be here)\n        console.log('Creating a Skeleton')\n        this.skeleton = new Skeleton(LANDMARKS.poseLandmarks)\n        this.skeleton.model.translateX(0.5)\n        this.skeleton.model.translateZ(0.5)\n        this.scene.add(this.skeleton.model)\n\n\n        // adding some lighting\n        const light = new THREE.AmbientLight(0xEEEEEE)\n        this.scene.add(light)\n\n        // adding Axes to the scene\n        const axesHelper = new THREE.AxesHelper(5)\n        this.scene.add(axesHelper)\n\n        // adding a grid helper\n        const gridHelper = new THREE.GridHelper(100, 10)\n        this.scene.add(gridHelper)\n\n        // Start the animation loop (all 3d models should be loaded before.)\n        this.camera.position.x = 0.3\n        this.camera.position.y = 0.3\n        this.camera.position.z = 5\n        //this.animate()\n    }\n\n    animate()\n    {\n        // get mouse sceen positions (-1, +1)\n        /*\n        this.mouse = new THREE.Vector3(\n            (MOUSE._x - this.canvas.offsetLeft) / this.canvas.offsetWidth * 2 - 1,\n            -(MOUSE._y - this.canvas.offsetTop) / this.canvas.offsetHeight * 2 + 1,\n            0.5\n        ).unproject(this.camera)\n\n        Print.try(this.mouse)\n        */\n\n        //this.model.scene.position.x = this.mouse.x\n        //this.model.scene.position.y = this.mouse.y\n        //this.model.scene.position.z = this.mouse.z\n\n\n        if (LANDMARKS.poseLandmarks)\n        {\n            // just update the skeleton coordinates\n            this.skeleton.update(LANDMARKS.poseLandmarks)\n\n            this.skeleton.model.position.copy(LANDMARKS.poseLandmarks[0])\n            //this.skeleton.model.rotation.y += 0.05\n        }\n\n\n\n\n\n        // Head_05 & Shoulderr_029 & Shoulderl_010\n        /*\n        for (let [key, value] of this.model.parser.associations) {\n            if (key.type === 'Bone' && (key.name === 'Head_05' || key.name === 'Shoulderl_010' || key.name === 'Shoulderr_029' )) {\n            }\n\n        }\n        */\n\n        //this.model.scene.rotation.y += 0.01\n        //console.log(this.model.scene.position.z)\n        //this.model.scene.position.z -= 0.01\n\n        this.renderer.render(this.scene, this.camera)\n        requestAnimationFrame(this.animate)\n    }\n\n    render()\n    {\n        return <div ref={ref => (this.mount = ref)} />\n    }\n}\n\n\nclass App extends React.Component\n{\n    constructor(props)\n    {\n        super(props)\n        this.video = null\n        this.canvas = null\n        this.ctx = null\n        this.pose = null\n        this.camera = null\n\n        this.onResults = this.onResults.bind(this)\n        this.renderLandmarks = this.renderLandmarks.bind(this)\n    }\n\n    async componentDidMount()\n    {\n        this.video = document.querySelector('#video_input')\n        this.canvas = document.querySelector('#output_canvas')\n        this.ctx = this.canvas.getContext('2d')\n\n        this.pose = new Pose({\n            locateFile: (file) => {\n                return `assets/js/${file}`\n                //return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`\n            }\n        })\n\n        this.pose.setOptions({\n            upperBodyOnly: false,\n            smoothLandmarks: true,\n            minDetectionConfidence: 0.5,\n            minTrackingConfidence: 0.5\n        })\n\n        this.pose.onResults(this.onResults)\n\n        this.camera = new Camera(this.video, {\n            onFrame: async () => {\n                await this.pose.send({image: this.video})\n            },\n            width: WIDTH,\n            height: HEIGHT,\n        })\n\n        this.camera.start()\n    }\n\n    onResults(results)\n    {\n        // asign results to accessable everywere (make it global)\n        LANDMARKS = results\n        /*\n        {\n            \"image\": canvasimage,\n            \"poseLandmarks\": [\n                {\n                    \"x\": 0.46757373213768005,\n                    \"y\": 0.36282193660736084,\n                    \"z\": -0.2994067668914795,\n                    \"visibility\": 1\n                },\n                ...\n            ]\n        }\n        */\n        //results.poseLandmarks[11]\n        //results.poseLandmarks[13]\n        //results.poseLandmarks[15]\n        //Print.try(results.poseLandmarks[15])\n\n        // render landmarks\n        this.renderLandmarks(results)\n    }\n\n    renderLandmarks(results)\n    {\n        this.ctx.save()\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n        this.ctx.drawImage(results.image, 0, 0, this.canvas.width, this.canvas.height)\n\n        drawConnectors(this.ctx, results.poseLandmarks, POSE_CONNECTIONS, { color: '#FFFFFF', lineWidth: 1 })\n        drawLandmarks(this.ctx, results.poseLandmarks, { color: '#FFFF00', lineWidth: 1 });\n        /*\n        drawConnectors(\n            this.ctx, results.poseLandmarks, POSE_CONNECTIONS, {\n            color: (data) => {\n                const x0 = this.canvas.width * data.from.x;\n                const y0 = this.canvas.height * data.from.y;\n                const x1 = this.canvas.width * data.to.x;\n                const y1 = this.canvas.height * data.to.y;\n\n                const z0 = clamp(data.from.z + 0.5, 0, 1);\n                const z1 = clamp(data.to.z + 0.5, 0, 1);\n\n                const gradient = this.ctx.createLinearGradient(x0, y0, x1, y1);\n                gradient.addColorStop(0, `rgba(0, ${255 * z0}, ${255 * (1 - z0)}, 1)`);\n                gradient.addColorStop(1.0, `rgba(0, ${255 * z1}, ${255 * (1 - z1)}, 1)`);\n                return gradient;\n            }\n        });\n\n        /*\n        drawLandmarks(this.ctx, Object.values(POSE_LANDMARKS_LEFT).map(index => results.poseLandmarks[index]),\n            { color: zColor, fillColor: '#FF0000' })\n\n        drawLandmarks(this.ctx, Object.values(POSE_LANDMARKS_RIGHT).map(index => results.poseLandmarks[index]),\n            { color: zColor, fillColor: '#00FF00' })\n\n        drawLandmarks(this.ctx, Object.values(POSE_LANDMARKS_NEUTRAL).map(index => results.poseLandmarks[index]),\n            { color: zColor, fillColor: '#AAAAAA' })\n        */\n        this.ctx.restore()\n    }\n\n    render()\n    {\n        return <>\n            <Render3D />\n            <canvas id='output_canvas' width={WIDTH} height={HEIGHT}></canvas>\n            <video id='video_input' width={WIDTH} height={HEIGHT}></video>\n        </>\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}